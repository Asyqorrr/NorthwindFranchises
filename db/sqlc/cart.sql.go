// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cart.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCart = `-- name: CreateCart :one
INSERT INTO public.cart(cart_user_id, cart_fr_id, cart_start_date, cart_end_date, cart_qty, cart_price, cart_total_price, cart_modified, cart_status, cart_cart_id)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
    RETURNING cart_id, cart_user_id, cart_fr_id, cart_start_date, cart_end_date, cart_qty, cart_price, cart_total_price, cart_modified, cart_status, cart_cart_id
`

type CreateCartParams struct {
	CartUserID     *int32           `json:"cart_user_id"`
	CartFrID       *int32           `json:"cart_fr_id"`
	CartStartDate  pgtype.Timestamp `json:"cart_start_date"`
	CartEndDate    pgtype.Timestamp `json:"cart_end_date"`
	CartQty        *int32           `json:"cart_qty"`
	CartPrice      *float64         `json:"cart_price"`
	CartTotalPrice *float64         `json:"cart_total_price"`
	CartModified   pgtype.Timestamp `json:"cart_modified"`
	CartStatus     *string          `json:"cart_status"`
	CartCartID     *int32           `json:"cart_cart_id"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (*Cart, error) {
	row := q.db.QueryRow(ctx, createCart,
		arg.CartUserID,
		arg.CartFrID,
		arg.CartStartDate,
		arg.CartEndDate,
		arg.CartQty,
		arg.CartPrice,
		arg.CartTotalPrice,
		arg.CartModified,
		arg.CartStatus,
		arg.CartCartID,
	)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CartUserID,
		&i.CartFrID,
		&i.CartStartDate,
		&i.CartEndDate,
		&i.CartQty,
		&i.CartPrice,
		&i.CartTotalPrice,
		&i.CartModified,
		&i.CartStatus,
		&i.CartCartID,
	)
	return &i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM public.cart 
    WHERE cart_id = $1
    RETURNING cart_id, cart_user_id, cart_fr_id, cart_start_date, cart_end_date, cart_qty, cart_price, cart_total_price, cart_modified, cart_status, cart_cart_id
`

func (q *Queries) DeleteCart(ctx context.Context, cartID int32) error {
	_, err := q.db.Exec(ctx, deleteCart, cartID)
	return err
}

const findCartByCustomerAndFranchises = `-- name: FindCartByCustomerAndFranchises :one
SELECT cart_id, cart_user_id, cart_fr_id, cart_start_date, cart_end_date, cart_qty, 
	cart_price, cart_total_price, cart_modified, cart_status, cart_cart_id
    FROM cart
    WHERE cart_user_id = $1 and cart_fr_id = $2 LIMIT 1
`

type FindCartByCustomerAndFranchisesParams struct {
	CartUserID *int32 `json:"cart_user_id"`
	CartFrID   *int32 `json:"cart_fr_id"`
}

func (q *Queries) FindCartByCustomerAndFranchises(ctx context.Context, arg FindCartByCustomerAndFranchisesParams) (*Cart, error) {
	row := q.db.QueryRow(ctx, findCartByCustomerAndFranchises, arg.CartUserID, arg.CartFrID)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CartUserID,
		&i.CartFrID,
		&i.CartStartDate,
		&i.CartEndDate,
		&i.CartQty,
		&i.CartPrice,
		&i.CartTotalPrice,
		&i.CartModified,
		&i.CartStatus,
		&i.CartCartID,
	)
	return &i, err
}

const findCartByCustomerId = `-- name: FindCartByCustomerId :many
SELECT c.cart_id, cart_user_id, cart_fr_id, cart_start_date, cart_end_date, cart_qty, 
	cart_price, cart_total_price, cart_modified, cart_status, cart_cart_id, u.user_name, fr.frch_name
	FROM public.cart c
	JOIN users u ON c.cart_user_id = u.user_id
	JOIN franchises fr ON c.cart_fr_id = fr.frch_id
    WHERE c.cart_user_id = $1
`

type FindCartByCustomerIdRow struct {
	CartID         int32            `json:"cart_id"`
	CartUserID     *int32           `json:"cart_user_id"`
	CartFrID       *int32           `json:"cart_fr_id"`
	CartStartDate  pgtype.Timestamp `json:"cart_start_date"`
	CartEndDate    pgtype.Timestamp `json:"cart_end_date"`
	CartQty        *int32           `json:"cart_qty"`
	CartPrice      *float64         `json:"cart_price"`
	CartTotalPrice *float64         `json:"cart_total_price"`
	CartModified   pgtype.Timestamp `json:"cart_modified"`
	CartStatus     *string          `json:"cart_status"`
	CartCartID     *int32           `json:"cart_cart_id"`
	UserName       *string          `json:"user_name"`
	FrchName       *string          `json:"frch_name"`
}

func (q *Queries) FindCartByCustomerId(ctx context.Context, cartUserID *int32) ([]*FindCartByCustomerIdRow, error) {
	rows, err := q.db.Query(ctx, findCartByCustomerId, cartUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindCartByCustomerIdRow
	for rows.Next() {
		var i FindCartByCustomerIdRow
		if err := rows.Scan(
			&i.CartID,
			&i.CartUserID,
			&i.CartFrID,
			&i.CartStartDate,
			&i.CartEndDate,
			&i.CartQty,
			&i.CartPrice,
			&i.CartTotalPrice,
			&i.CartModified,
			&i.CartStatus,
			&i.CartCartID,
			&i.UserName,
			&i.FrchName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCartByCustomerOrFranchises = `-- name: FindCartByCustomerOrFranchises :one
SELECT c.cart_id, cart_user_id, cart_fr_id, cart_start_date, cart_end_date, cart_qty, 
	cart_price, cart_total_price, cart_modified, cart_status, cart_cart_id, u.user_name, fr.frch_name
	FROM public.cart c
	JOIN users u ON c.cart_user_id = u.user_id
	JOIN franchises fr ON c.cart_fr_id = fr.frch_id
    WHERE c.cart_user_id = $1 OR fr.frch_name = $1
`

type FindCartByCustomerOrFranchisesRow struct {
	CartID         int32            `json:"cart_id"`
	CartUserID     *int32           `json:"cart_user_id"`
	CartFrID       *int32           `json:"cart_fr_id"`
	CartStartDate  pgtype.Timestamp `json:"cart_start_date"`
	CartEndDate    pgtype.Timestamp `json:"cart_end_date"`
	CartQty        *int32           `json:"cart_qty"`
	CartPrice      *float64         `json:"cart_price"`
	CartTotalPrice *float64         `json:"cart_total_price"`
	CartModified   pgtype.Timestamp `json:"cart_modified"`
	CartStatus     *string          `json:"cart_status"`
	CartCartID     *int32           `json:"cart_cart_id"`
	UserName       *string          `json:"user_name"`
	FrchName       *string          `json:"frch_name"`
}

func (q *Queries) FindCartByCustomerOrFranchises(ctx context.Context, cartUserID *int32) (*FindCartByCustomerOrFranchisesRow, error) {
	row := q.db.QueryRow(ctx, findCartByCustomerOrFranchises, cartUserID)
	var i FindCartByCustomerOrFranchisesRow
	err := row.Scan(
		&i.CartID,
		&i.CartUserID,
		&i.CartFrID,
		&i.CartStartDate,
		&i.CartEndDate,
		&i.CartQty,
		&i.CartPrice,
		&i.CartTotalPrice,
		&i.CartModified,
		&i.CartStatus,
		&i.CartCartID,
		&i.UserName,
		&i.FrchName,
	)
	return &i, err
}

const findCartsbyId = `-- name: FindCartsbyId :one
SELECT cart_id, cart_user_id, cart_fr_id, cart_start_date, cart_end_date, cart_qty, 
	cart_price, cart_total_price, cart_modified, cart_status, cart_cart_id
    FROM cart
    WHERE cart_id = $1
`

func (q *Queries) FindCartsbyId(ctx context.Context, cartID int32) (*Cart, error) {
	row := q.db.QueryRow(ctx, findCartsbyId, cartID)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CartUserID,
		&i.CartFrID,
		&i.CartStartDate,
		&i.CartEndDate,
		&i.CartQty,
		&i.CartPrice,
		&i.CartTotalPrice,
		&i.CartModified,
		&i.CartStatus,
		&i.CartCartID,
	)
	return &i, err
}

const updateCartQTY = `-- name: UpdateCartQTY :one
UPDATE public.cart 
    SET cart_qty = $1 
    WHERE cart_id = $2 
    RETURNING cart_id, cart_user_id, cart_fr_id, cart_start_date, cart_end_date, cart_qty, cart_price, cart_total_price, cart_modified, cart_status, cart_cart_id
`

type UpdateCartQTYParams struct {
	CartQty *int32 `json:"cart_qty"`
	CartID  int32  `json:"cart_id"`
}

func (q *Queries) UpdateCartQTY(ctx context.Context, arg UpdateCartQTYParams) (*Cart, error) {
	row := q.db.QueryRow(ctx, updateCartQTY, arg.CartQty, arg.CartID)
	var i Cart
	err := row.Scan(
		&i.CartID,
		&i.CartUserID,
		&i.CartFrID,
		&i.CartStartDate,
		&i.CartEndDate,
		&i.CartQty,
		&i.CartPrice,
		&i.CartTotalPrice,
		&i.CartModified,
		&i.CartStatus,
		&i.CartCartID,
	)
	return &i, err
}
