// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: franchises.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFranchises = `-- name: CreateFranchises :one
INSERT INTO franchises(
    frch_name, frch_desc, frch_price_buyout, frch_price_yearly, frch_modified, frch_cate_id)
	VALUES ($1, $2, $3, $4, $5, $6)
    RETURNING frch_id, frch_name, frch_desc, frch_price_buyout, frch_price_yearly, frch_modified, frch_cate_id
`

type CreateFranchisesParams struct {
	FrchName        *string          `json:"frch_name"`
	FrchDesc        *string          `json:"frch_desc"`
	FrchPriceBuyout *float64         `json:"frch_price_buyout"`
	FrchPriceYearly *float64         `json:"frch_price_yearly"`
	FrchModified    pgtype.Timestamp `json:"frch_modified"`
	FrchCateID      *int32           `json:"frch_cate_id"`
}

func (q *Queries) CreateFranchises(ctx context.Context, arg CreateFranchisesParams) (*Franchise, error) {
	row := q.db.QueryRow(ctx, createFranchises,
		arg.FrchName,
		arg.FrchDesc,
		arg.FrchPriceBuyout,
		arg.FrchPriceYearly,
		arg.FrchModified,
		arg.FrchCateID,
	)
	var i Franchise
	err := row.Scan(
		&i.FrchID,
		&i.FrchName,
		&i.FrchDesc,
		&i.FrchPriceBuyout,
		&i.FrchPriceYearly,
		&i.FrchModified,
		&i.FrchCateID,
	)
	return &i, err
}

const deleteFranchises = `-- name: DeleteFranchises :exec
DELETE FROM franchises
	WHERE frch_id = $1
    RETURNING frch_id, frch_name, frch_desc, frch_price_buyout, frch_price_yearly, frch_modified, frch_cate_id
`

func (q *Queries) DeleteFranchises(ctx context.Context, frchID int32) error {
	_, err := q.db.Exec(ctx, deleteFranchises, frchID)
	return err
}

const getAllFranchises = `-- name: GetAllFranchises :many
SELECT frch_id, frch_name, frch_desc, frch_price_buyout, frch_price_yearly, frch_modified, frch_cate_id
	FROM franchises
`

func (q *Queries) GetAllFranchises(ctx context.Context) ([]*Franchise, error) {
	rows, err := q.db.Query(ctx, getAllFranchises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Franchise
	for rows.Next() {
		var i Franchise
		if err := rows.Scan(
			&i.FrchID,
			&i.FrchName,
			&i.FrchDesc,
			&i.FrchPriceBuyout,
			&i.FrchPriceYearly,
			&i.FrchModified,
			&i.FrchCateID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFranchisesById = `-- name: GetFranchisesById :one
SELECT frch_id, frch_name, frch_desc, frch_price_buyout, frch_price_yearly, frch_modified, frch_cate_id
	FROM franchises
    WHERE frch_id = $1
`

func (q *Queries) GetFranchisesById(ctx context.Context, frchID int32) (*Franchise, error) {
	row := q.db.QueryRow(ctx, getFranchisesById, frchID)
	var i Franchise
	err := row.Scan(
		&i.FrchID,
		&i.FrchName,
		&i.FrchDesc,
		&i.FrchPriceBuyout,
		&i.FrchPriceYearly,
		&i.FrchModified,
		&i.FrchCateID,
	)
	return &i, err
}

const getFranchisesByNameAndCateId = `-- name: GetFranchisesByNameAndCateId :one
SELECT frch_id, frch_name, frch_desc, frch_price_buyout, frch_price_yearly, frch_modified, frch_cate_id
	FROM franchises
    WHERE frch_name = $1 AND frch_cate_id = $2
`

type GetFranchisesByNameAndCateIdParams struct {
	FrchName   *string `json:"frch_name"`
	FrchCateID *int32  `json:"frch_cate_id"`
}

func (q *Queries) GetFranchisesByNameAndCateId(ctx context.Context, arg GetFranchisesByNameAndCateIdParams) (*Franchise, error) {
	row := q.db.QueryRow(ctx, getFranchisesByNameAndCateId, arg.FrchName, arg.FrchCateID)
	var i Franchise
	err := row.Scan(
		&i.FrchID,
		&i.FrchName,
		&i.FrchDesc,
		&i.FrchPriceBuyout,
		&i.FrchPriceYearly,
		&i.FrchModified,
		&i.FrchCateID,
	)
	return &i, err
}
