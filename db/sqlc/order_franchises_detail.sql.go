// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order_franchises_detail.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderFranchisesDetail = `-- name: CreateOrderFranchisesDetail :one
INSERT INTO public.order_franchises_detail(ofde_start_date, ofde_end_date, ofde_qty_unit, ofde_price, ofde_total_price, ofde_orfi_id, ofde_frch_id)
	VALUES ($1,$2,$3,$4,$5,$6,$7)
    RETURNING ofde_id, ofde_start_date, ofde_end_date, ofde_qty_unit, ofde_price, ofde_total_price, ofde_orfi_id, ofde_frch_id
`

type CreateOrderFranchisesDetailParams struct {
	OfdeStartDate  pgtype.Timestamp `json:"ofde_start_date"`
	OfdeEndDate    pgtype.Timestamp `json:"ofde_end_date"`
	OfdeQtyUnit    *int32           `json:"ofde_qty_unit"`
	OfdePrice      *float64         `json:"ofde_price"`
	OfdeTotalPrice *float64         `json:"ofde_total_price"`
	OfdeOrfiID     *int32           `json:"ofde_orfi_id"`
	OfdeFrchID     *int32           `json:"ofde_frch_id"`
}

func (q *Queries) CreateOrderFranchisesDetail(ctx context.Context, arg CreateOrderFranchisesDetailParams) (*OrderFranchisesDetail, error) {
	row := q.db.QueryRow(ctx, createOrderFranchisesDetail,
		arg.OfdeStartDate,
		arg.OfdeEndDate,
		arg.OfdeQtyUnit,
		arg.OfdePrice,
		arg.OfdeTotalPrice,
		arg.OfdeOrfiID,
		arg.OfdeFrchID,
	)
	var i OrderFranchisesDetail
	err := row.Scan(
		&i.OfdeID,
		&i.OfdeStartDate,
		&i.OfdeEndDate,
		&i.OfdeQtyUnit,
		&i.OfdePrice,
		&i.OfdeTotalPrice,
		&i.OfdeOrfiID,
		&i.OfdeFrchID,
	)
	return &i, err
}

const deleteOrderFranchisesDetail = `-- name: DeleteOrderFranchisesDetail :exec
DELETE FROM public.order_franchises_detail
    WHERE ofde_id = $1
    RETURNING ofde_id, ofde_start_date, ofde_end_date, ofde_qty_unit, ofde_price, ofde_total_price, ofde_orfi_id, ofde_frch_id
`

func (q *Queries) DeleteOrderFranchisesDetail(ctx context.Context, ofdeID int32) error {
	_, err := q.db.Exec(ctx, deleteOrderFranchisesDetail, ofdeID)
	return err
}

const findAllOrderFranchisesDetail = `-- name: FindAllOrderFranchisesDetail :many
SELECT ofde_id, ofde_start_date, ofde_end_date, ofde_qty_unit, ofde_price, ofde_total_price, ofde_orfi_id, ofde_frch_id
	FROM public.order_franchises_detail
`

func (q *Queries) FindAllOrderFranchisesDetail(ctx context.Context) ([]*OrderFranchisesDetail, error) {
	rows, err := q.db.Query(ctx, findAllOrderFranchisesDetail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*OrderFranchisesDetail
	for rows.Next() {
		var i OrderFranchisesDetail
		if err := rows.Scan(
			&i.OfdeID,
			&i.OfdeStartDate,
			&i.OfdeEndDate,
			&i.OfdeQtyUnit,
			&i.OfdePrice,
			&i.OfdeTotalPrice,
			&i.OfdeOrfiID,
			&i.OfdeFrchID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrderFranchisesDetailById = `-- name: FindOrderFranchisesDetailById :one
SELECT ofde_id, ofde_start_date, ofde_end_date, ofde_qty_unit, ofde_price, ofde_total_price, ofde_orfi_id, ofde_frch_id
	FROM public.order_franchises_detail
    WHERE ofde_id = $1
`

func (q *Queries) FindOrderFranchisesDetailById(ctx context.Context, ofdeID int32) (*OrderFranchisesDetail, error) {
	row := q.db.QueryRow(ctx, findOrderFranchisesDetailById, ofdeID)
	var i OrderFranchisesDetail
	err := row.Scan(
		&i.OfdeID,
		&i.OfdeStartDate,
		&i.OfdeEndDate,
		&i.OfdeQtyUnit,
		&i.OfdePrice,
		&i.OfdeTotalPrice,
		&i.OfdeOrfiID,
		&i.OfdeFrchID,
	)
	return &i, err
}
